---
description: Conducts ongoing performance testing of a HTTP end-point or REST API.
version: 4
---
# REST API performance test

This example makes a request against a REST API every minute and measures its performance.

When finished running you open `api-performance-test.csv` to check your results. You can load this file in Data-Forge Notebook and plot a chart from it to see if there's any intermittent spikes in the performance of your API.

**NOTE**: This notebook never stops. You have to manually stop it when you are finished. While running it logs the time for the HTTP request once every minute.
------
## Import required dependencies

We are using [axios](https://www.npmjs.com/package/axios), [cron](https://www.npmjs.com/package/cron), [statman-stopwatch](https://www.npmjs.com/package/statman-stopwatch), [csv-write-stream](https://www.npmjs.com/package/csv-write-stream) and [dayjs](https://www.npmjs.com/package/dayjs).
------
```typescript
const axios = require('axios');
const { CronJob } = require('cron');
const Stopwatch = require('statman-stopwatch');
const fs = require('fs');
const csvWriter = require('csv-write-stream');
const dayjs = require('dayjs');
```



------
## Create output file

Create a streaming CSV output file that we can write results to as we go.
------
```typescript
const writer = csvWriter({ headers: ["Date", "Elapsed"] });
writer.pipe(fs.createWriteStream("api-performance-test.csv"));
```



------
## Create a timing function

This is a helper function that can call another function and measure the time that it takes.
------
```typescript

async function timeIt(fn) {
    const stopwatch = new Stopwatch();
    stopwatch.start();
    await fn();
    const elapsedSeconds = stopwatch.stop() / 1000;
    writer.write({ Date: dayjs().format("YYYY-MM-DD HH:mm:ss"), Elapsed: elapsedSeconds });
    console.log(`Request time: ${elapsedSeconds} seconds.`);
}
```



------
## Make a HTTP request

Create a function that makes a request to a REST API.

The URL can be whatever you want.
------
```typescript
const url = "https://jsonplaceholder.typicode.com/todos/1";

async function makeRequest() {
    await axios.get(url);
}
```



------
## Put it on repeat!

Use cron to repeate the HTTP request very minute.

To use a different schedule [please see these examples](https://crontab.guru/examples.html).
------
```typescript
const oneMinuteSchedule = "0 */1 * * * *";

const job = new CronJob(
    oneMinuteSchedule,
    () => {
        timeIt(makeRequest);    
    
    },
    null,
    true,
    'Australia/Brisbane'
);

job.start(); // Starts the job.
```


######
```json - output
{
    "value": {
        "displayType": "string",
        "data": "Request time: 0.17383570000005422 seconds.\n"
    }
}
```

######
```json - output
{
    "value": {
        "displayType": "string",
        "data": "Request time: 0.15284640100004618 seconds.\n"
    }
}
```


