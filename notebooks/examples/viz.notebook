---
description: Shows various ways to visualize data in Data-Forge Notebook.
version: 4
---
# Examples of visualization

There's many ways to visualize your data in Data-Forge Notebook, lets look at a few here.
------
## Plain ole' console logging

Use `console.log` to output whatever you want.
------
```typescript
const data = "Whatever you want to log!";
console.log(data);
```


######
```json - output
{
    "value": {
        "displayType": "text",
        "data": "Whatever you want to log!\n"
    }
}
```


------
## JavaScript array

We can use the `display` function for formatted data visualization. 

We can use it to visualize JavaScript arrays:
------
```typescript
const data = [1, 2, 3, 4];
display(data);
```


######
```json - output
{
    "value": {
        "data": [
            1,
            2,
            3,
            4
        ]
    }
}
```


------
## JavaScript object

We can also use the `display` function to visualize JavaScript objects:
------
```typescript
const data = { A: 1, B: "hello" };
display(data);
```


######
```json - output
{
    "value": {
        "data": {
            "A": 1,
            "B": "hello"
        }
    }
}
```


------
## JavaScript object as table

Use the `display` function and `table` plugin to visualize a JavaScript object as tabular data:
------
```typescript
const data = { A: 1, B: "hello" };
display(data, "table");
```


######
```json - output
{
    "value": {
        "displayType": "table",
        "data": {
            "A": 1,
            "B": "hello"
        }
    }
}
```


------
## JavaScript array as table

Use the `display` function with the `table` plugin to visualize a JavaScript array as tabular data.
------
```typescript
const data = [{ A: 1, B: "Hello" }, { A: 2, B: "Computer!" }];
display(data, "table");
```


######
```json - output
{
    "value": {
        "displayType": "table",
        "data": [
            {
                "A": 1,
                "B": "Hello"
            },
            {
                "A": 2,
                "B": "Computer!"
            }
        ]
    }
}
```


------
## JSON data

Use the `display` function with the `json` plugin to render JSON text as structured data without having to parse it.
------
```typescript
const data = '[ { "A": 1, "B": "Hello" }, { "A": 2, "B": "Computer!" } ]';
display(data, "json");
```


######
```json - output
{
    "value": {
        "displayType": "json",
        "data": "[ { \"A\": 1, \"B\": \"Hello\" }, { \"A\": 2, \"B\": \"Computer!\" } ]"
    }
}
```


------
## Preformatted text

Use `display` to print pre-formatted text to cell output.
------
```typescript
const text = "Hello!\nThis is some preformatted text with newlines baked in :)";
display(text, "text");
```


######
```json - output
{
    "value": {
        "displayType": "text",
        "data": "Hello!\nThis is some preformatted text with newlines baked in :)"
    }
}
```


------
## Preview data from CSV file

Use the [datakit](https://www.npmjs.com/package/datakit) library to read a CSV data file and view it as a table.
------
```typescript
const datakit = require('datakit');
const data = await datakit.readCsv("./example.csv");
display(data.slice(0, 5), "table");
```


######
```json - output
{
    "value": {
        "displayType": "table",
        "data": [
            {
                "Name": "Alex",
                "Sex": "M",
                "Age": 41,
                "Height (in)": 74,
                "Weight (lbs)": 170
            },
            {
                "Name": "Bert",
                "Sex": "M",
                "Age": 42,
                "Height (in)": 68,
                "Weight (lbs)": 166
            },
            {
                "Name": "Carl",
                "Sex": "M",
                "Age": 32,
                "Height (in)": 70,
                "Weight (lbs)": 155
            },
            {
                "Name": "Dave",
                "Sex": "M",
                "Age": 39,
                "Height (in)": 72,
                "Weight (lbs)": 167
            },
            {
                "Name": "Elly",
                "Sex": "F",
                "Age": 30,
                "Height (in)": 66,
                "Weight (lbs)": 124
            }
        ]
    }
}
```


------
## Preview data from JSON file

Use the [datakit](https://www.npmjs.com/package/datakit) library to read a JSON data file and view it as a table.
------
```typescript
const datakit = require('datakit');
const data = await datakit.readJson("./example.json");
display(data.slice(0, 3), "table");
```


######
```json - output
{
    "value": {
        "displayType": "table",
        "data": [
            {
                "Name": "Alex",
                "Sex": "M",
                "Age": 41,
                "Height (in)": 74,
                "Weight (lbs)": 170
            },
            {
                "Name": "Bert",
                "Sex": "M",
                "Age": 42,
                "Height (in)": 68,
                "Weight (lbs)": 166
            },
            {
                "Name": "Carl",
                "Sex": "M",
                "Age": 32,
                "Height (in)": 70,
                "Weight (lbs)": 155
            }
        ]
    }
}
```


------
## Charts: Plot any ole JavaScript data!

Easily create charts from JavaScript data using the `apex` plugin with the `display` function.

## Plot arrays of numbers
------
```typescript
const data = [50, 20, 10, 40, 15, 25];
display(data, "apex");
```


######
```json - output
{
    "value": {
        "displayType": "apex",
        "data": [
            50,
            20,
            10,
            40,
            15,
            25
        ]
    }
}
```


------
## Plot arrays of JavaScript objects
------
```typescript
const data = [{ D1: 50, D2: 30 }, { D1: 20, D2: 200 }, { D1: 10, D2: 100 }, { D1: 40, D2: 400 }];
display(data, "apex");
```


######
```json - output
{
    "value": {
        "displayType": "apex",
        "data": [
            {
                "D1": 50,
                "D2": 30
            },
            {
                "D1": 20,
                "D2": 200
            },
            {
                "D1": 10,
                "D2": 100
            },
            {
                "D1": 40,
                "D2": 400
            }
        ]
    }
}
```


------
## Plot by column!
------
```typescript
const data = {
    D1: [30, 10, 50, 15],
    D2: [300, 20, 10, 150],
};
display(data, "apex");
```


######
```json - output
{
    "value": {
        "displayType": "apex",
        "data": {
            "D1": [
                30,
                10,
                50,
                15
            ],
            "D2": [
                300,
                20,
                10,
                150
            ]
        }
    }
}
```


------
## Load and plot CSV and JSON data!

Easily load and plot CSV and JSON data with help of [datakit](https://www.npmjs.com/package/daki) on npm.
------
```typescript
const datakit = require('datakit');
const data = await datakit.readCsv("./example.csv");
display(data, "apex");
```


######
```json - output
{
    "value": {
        "displayType": "apex",
        "data": [
            {
                "Name": "Alex",
                "Sex": "M",
                "Age": 41,
                "Height (in)": 74,
                "Weight (lbs)": 170
            },
            {
                "Name": "Bert",
                "Sex": "M",
                "Age": 42,
                "Height (in)": 68,
                "Weight (lbs)": 166
            },
            {
                "Name": "Carl",
                "Sex": "M",
                "Age": 32,
                "Height (in)": 70,
                "Weight (lbs)": 155
            },
            {
                "Name": "Dave",
                "Sex": "M",
                "Age": 39,
                "Height (in)": 72,
                "Weight (lbs)": 167
            },
            {
                "Name": "Elly",
                "Sex": "F",
                "Age": 30,
                "Height (in)": 66,
                "Weight (lbs)": 124
            },
            {
                "Name": "Fran",
                "Sex": "F",
                "Age": 33,
                "Height (in)": 66,
                "Weight (lbs)": 115
            },
            {
                "Name": "Gwen",
                "Sex": "F",
                "Age": 26,
                "Height (in)": 64,
                "Weight (lbs)": 121
            },
            {
                "Name": "Hank",
                "Sex": "M",
                "Age": 30,
                "Height (in)": 71,
                "Weight (lbs)": 158
            },
            {
                "Name": "Ivan",
                "Sex": "M",
                "Age": 53,
                "Height (in)": 72,
                "Weight (lbs)": 175
            },
            {
                "Name": "Jake",
                "Sex": "M",
                "Age": 32,
                "Height (in)": 69,
                "Weight (lbs)": 143
            },
            {
                "Name": "Kate",
                "Sex": "F",
                "Age": 47,
                "Height (in)": 69,
                "Weight (lbs)": 139
            },
            {
                "Name": "Luke",
                "Sex": "M",
                "Age": 34,
                "Height (in)": 72,
                "Weight (lbs)": 163
            },
            {
                "Name": "Myra",
                "Sex": "F",
                "Age": 23,
                "Height (in)": 62,
                "Weight (lbs)": 98
            },
            {
                "Name": "Neil",
                "Sex": "M",
                "Age": 36,
                "Height (in)": 75,
                "Weight (lbs)": 160
            },
            {
                "Name": "Omar",
                "Sex": "M",
                "Age": 38,
                "Height (in)": 70,
                "Weight (lbs)": 145
            },
            {
                "Name": "Page",
                "Sex": "F",
                "Age": 31,
                "Height (in)": 67,
                "Weight (lbs)": 135
            },
            {
                "Name": "Quin",
                "Sex": "M",
                "Age": 29,
                "Height (in)": 71,
                "Weight (lbs)": 176
            },
            {
                "Name": "Ruth",
                "Sex": "F",
                "Age": 28,
                "Height (in)": 65,
                "Weight (lbs)": 131
            }
        ]
    }
}
```


------
```typescript
const datakit = require('datakit');
const data = await datakit.readJson("./example.json");
display(data, "apex");
```


######
```json - output
{
    "value": {
        "displayType": "apex",
        "data": [
            {
                "Name": "Alex",
                "Sex": "M",
                "Age": 41,
                "Height (in)": 74,
                "Weight (lbs)": 170
            },
            {
                "Name": "Bert",
                "Sex": "M",
                "Age": 42,
                "Height (in)": 68,
                "Weight (lbs)": 166
            },
            {
                "Name": "Carl",
                "Sex": "M",
                "Age": 32,
                "Height (in)": 70,
                "Weight (lbs)": 155
            },
            {
                "Name": "Dave",
                "Sex": "M",
                "Age": 39,
                "Height (in)": 72,
                "Weight (lbs)": 167
            },
            {
                "Name": "Elly",
                "Sex": "F",
                "Age": 30,
                "Height (in)": 66,
                "Weight (lbs)": 124
            },
            {
                "Name": "Fran",
                "Sex": "F",
                "Age": 33,
                "Height (in)": 66,
                "Weight (lbs)": 115
            },
            {
                "Name": "Gwen",
                "Sex": "F",
                "Age": 26,
                "Height (in)": 64,
                "Weight (lbs)": 121
            },
            {
                "Name": "Hank",
                "Sex": "M",
                "Age": 30,
                "Height (in)": 71,
                "Weight (lbs)": 158
            },
            {
                "Name": "Ivan",
                "Sex": "M",
                "Age": 53,
                "Height (in)": 72,
                "Weight (lbs)": 175
            },
            {
                "Name": "Jake",
                "Sex": "M",
                "Age": 32,
                "Height (in)": 69,
                "Weight (lbs)": 143
            },
            {
                "Name": "Kate",
                "Sex": "F",
                "Age": 47,
                "Height (in)": 69,
                "Weight (lbs)": 139
            },
            {
                "Name": "Luke",
                "Sex": "M",
                "Age": 34,
                "Height (in)": 72,
                "Weight (lbs)": 163
            },
            {
                "Name": "Myra",
                "Sex": "F",
                "Age": 23,
                "Height (in)": 62,
                "Weight (lbs)": 98
            },
            {
                "Name": "Neil",
                "Sex": "M",
                "Age": 36,
                "Height (in)": 75,
                "Weight (lbs)": 160
            },
            {
                "Name": "Omar",
                "Sex": "M",
                "Age": 38,
                "Height (in)": 70,
                "Weight (lbs)": 145
            },
            {
                "Name": "Page",
                "Sex": "F",
                "Age": 31,
                "Height (in)": 67,
                "Weight (lbs)": 135
            },
            {
                "Name": "Quin",
                "Sex": "M",
                "Age": 29,
                "Height (in)": 71,
                "Weight (lbs)": 176
            },
            {
                "Name": "Ruth",
                "Sex": "F",
                "Age": 28,
                "Height (in)": 65,
                "Weight (lbs)": 131
            }
        ]
    }
}
```


------
## Visualize geographic data

Use the `display` function to plot geographic coordinates and GeoJSON!
------
```typescript
display({
    location: [51.505, -0.10],
    zoom: 13,
    markers: [
        [51.505, -0.10],
        [51.5, -0.09],
        [51.51, -0.08]
    ],
}, "geo");
```


######
```json - output
{
    "value": {
        "displayType": "geo",
        "data": {
            "location": [
                51.505,
                -0.1
            ],
            "zoom": 13,
            "markers": [
                [
                    51.505,
                    -0.1
                ],
                [
                    51.5,
                    -0.09
                ],
                [
                    51.51,
                    -0.08
                ]
            ]
        }
    }
}
```


------
## More charts!

Want to see more charts?

[See the charts example](http://open-example=./charts.notebook).
------
## More maps!

Want to see more maps?

[See the maps example](http://open-example=./maps.notebook)
------
## What's the next step?

There's so much you can do with Data-Forge Notebook.

What are you interested in?

- [Plot charts](http://open-notebook=./plot-charts.notebook)
- [Plot maps](http://open-notebook=./plot-maps.notebook)
- [Work with CSV data files](http://open-notebook=./csv-file-example.notebook)
- [Work with JSON data files](http://open-notebook=./json-file-example.notebook)
- [Work with REST APIs](http://open-notebook=./rest-api-example.notebook)

[Browse all example notebooks](http://command+open-example-notebook)
------
## More visualizations coming soon

More visualization are coming in future editions of Data-Forge Notebook, for example:

- Images
- Node.js buffers
- Vectors, matrices and maths formulas
- Colors

[Email](mailto:support@data-forge-notebook.com) and let me know what else could be added!
