---
description: Shows how to match patterns with the Z library.
version: 4
---
# Examples of pattern matching

## Using the Z library!

Web page:

[https://z-pattern-matching.github.io/](https://z-pattern-matching.github.io/)
------
### Import the library:
------
```typescript
const { matches } = require('z')
```



------
### Example: Matches by Object property
------
```typescript
const person = { name: 'Maria', phone: '1234' }
matches(person)(
    (x = { name: 'John' }) => console.log('John you are not welcome!'),
    (x) => console.log(`Hey ${x.name}, you are welcome!`)
);
```


######
```json - output
{
    "value": {
        "displayType": "string",
        "data": "Hey Maria, you are welcome!\n"
    }
}
```


------
```typescript
const person = { name: 'John', phone: '1234' }
matches(person)(
    (x = { name: 'John' }) => console.log('John you are not welcome!'),
    (x) => console.log(`Hey ${x.name}, you are welcome!`)
);
```


######
```json - output
{
    "value": {
        "displayType": "string",
        "data": "John you are not welcome!\n"
    }
}
```


------
### Example: Matches by type or instances
------
```typescript
display(matches(1)(
    (x = 2) => 'number 2 is the best!!!',
    (x = Number) => `number ${x} is not that good`,
    (x = Date) => 'blaa.. dates are awful!'
));
```


######
```json - output
{
    "value": {
        "displayType": "string",
        "data": "number 1 is not that good"
    }
}
```


------
```typescript
display(matches(2)(
    (x = 2) => 'number 2 is the best!!!',
    (x = Number) => `number ${x} is not that good`,
    (x = Date) => 'blaa.. dates are awful!'
));
```


######
```json - output
{
    "value": {
        "displayType": "string",
        "data": "number 2 is the best!!!"
    }
}
```


------
### Example: matches Array content

To match array content you need create multiple arguments for the match function, such as (a, b, c, tail) => {} , then each variable match each item from array. Note: last variable contains all remaining array items, formally named tail. Examples:
------
```typescript
display(matches([1, 2, 3, 4, 5])(
    (a, b, c, tail) => 'a = 1, b = 2, c = 3, tail = [4, 5]'
));

display(matches([1, 2])(
    (a, tail) => 'a = 1, tail = [2]'
));

display(matches([1, 2])(
    (a, b, tail) => 'Will not match here',
    (a = 2, tail = []) => 'Will not match here',
    (a = 1, tail) => 'Will match here, tail = []'
));
```


######
```json - output
{
    "value": {
        "displayType": "string",
        "data": "a = 1, b = 2, c = 3, tail = [4, 5]"
    },
    "height": 30
}
```

######
```json - output
{
    "value": {
        "displayType": "string",
        "data": "a = 1, tail = [2]"
    }
}
```

######
```json - output
{
    "value": {
        "displayType": "string",
        "data": "Will match here, tail = []"
    }
}
```


------
### Example: Powerful recursive code which will remove sequential repeated items from Array.

Can be mind blowing if itâ€™s the first time you meet pattern matching, but you are gonna understand it!
------
```typescript
const compress = (numbers) => {
    return matches(numbers)(
        (x, y, xs) => x === y
            ? compress([x].concat(xs))
            : [x].concat(compress([y].concat(xs))),
        (x, xs) => x // stopping condition
    );
};

display(compress([1, 1, 2, 3, 4, 4, 4]));
```


######
```json - output
{
    "value": {
        "displayType": "array",
        "data": [
            1,
            2,
            3,
            4
        ]
    }
}
```


