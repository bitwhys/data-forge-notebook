---
description: Example of parsing JavaScript to an abstract syntax tree (AST) using Babel.
version: 4
---
# JavaScript parsing example

This is an example of parsing JavaScript code and manipulating the abstract syntax tree derived from [the Babel Plugin Handbook](https://github.com/jamiebuilds/babel-handbook/blob/master/translations/en/plugin-handbook.md).

This is straightward way to learn the basics of creating [Babel plugins](https://babeljs.io/docs/en/plugins/).
------
## We need some code

First we need some code to play with:
------
```typescript
const code = 
    `function square(n) {
         return n * n;
    }`;
```



------
## Parse the code

Now we use [Babylon](https://babeljs.io/docs/en/babylon.html) ([Babel's](https://babeljs.io/) parser) to parse the code:
------
```typescript
import * as babylon from "babylon";

const ast = babylon.parse(code);
```



------
## Visualize the AST

Parsing the code gives us an [abstract syntax tree](https://en.wikipedia.org/wiki/Abstract_syntax_tree) (AST).

Let's visualize the structure of the AST:
------
```typescript
display(ast);
```


######
```json - output
{
    "value": {
        "data": {
            "type": "File",
            "start": 0,
            "end": 49,
            "loc": {
                "start": {
                    "line": 1,
                    "column": 0
                },
                "end": {
                    "line": 3,
                    "column": 5
                }
            },
            "program": {
                "type": "Program",
                "start": 0,
                "end": 49,
                "loc": {
                    "start": {
                        "line": 1,
                        "column": 0
                    },
                    "end": {
                        "line": 3,
                        "column": 5
                    }
                },
                "sourceType": "script",
                "body": [
                    {
                        "type": "FunctionDeclaration",
                        "start": 0,
                        "end": 49,
                        "loc": {
                            "start": {
                                "line": 1,
                                "column": 0
                            },
                            "end": {
                                "line": 3,
                                "column": 5
                            }
                        },
                        "id": {
                            "type": "Identifier",
                            "start": 9,
                            "end": 15,
                            "loc": {
                                "start": {
                                    "line": 1,
                                    "column": 9
                                },
                                "end": {
                                    "line": 1,
                                    "column": 15
                                },
                                "identifierName": "square"
                            },
                            "name": "square"
                        },
                        "generator": false,
                        "expression": false,
                        "async": false,
                        "params": [
                            {
                                "type": "Identifier",
                                "start": 16,
                                "end": 17,
                                "loc": {
                                    "start": {
                                        "line": 1,
                                        "column": 16
                                    },
                                    "end": {
                                        "line": 1,
                                        "column": 17
                                    },
                                    "identifierName": "n"
                                },
                                "name": "n"
                            }
                        ],
                        "body": {
                            "type": "BlockStatement",
                            "start": 19,
                            "end": 49,
                            "loc": {
                                "start": {
                                    "line": 1,
                                    "column": 19
                                },
                                "end": {
                                    "line": 3,
                                    "column": 5
                                }
                            },
                            "body": [
                                {
                                    "type": "ReturnStatement",
                                    "start": 30,
                                    "end": 43,
                                    "loc": {
                                        "start": {
                                            "line": 2,
                                            "column": 9
                                        },
                                        "end": {
                                            "line": 2,
                                            "column": 22
                                        }
                                    },
                                    "argument": {
                                        "type": "BinaryExpression",
                                        "start": 37,
                                        "end": 42,
                                        "loc": {
                                            "start": {
                                                "line": 2,
                                                "column": 16
                                            },
                                            "end": {
                                                "line": 2,
                                                "column": 21
                                            }
                                        },
                                        "left": {
                                            "type": "Identifier",
                                            "start": 37,
                                            "end": 38,
                                            "loc": {
                                                "start": {
                                                    "line": 2,
                                                    "column": 16
                                                },
                                                "end": {
                                                    "line": 2,
                                                    "column": 17
                                                },
                                                "identifierName": "n"
                                            },
                                            "name": "n"
                                        },
                                        "operator": "*",
                                        "right": {
                                            "type": "Identifier",
                                            "start": 41,
                                            "end": 42,
                                            "loc": {
                                                "start": {
                                                    "line": 2,
                                                    "column": 20
                                                },
                                                "end": {
                                                    "line": 2,
                                                    "column": 21
                                                },
                                                "identifierName": "n"
                                            },
                                            "name": "n"
                                        }
                                    }
                                }
                            ],
                            "directives": []
                        }
                    }
                ],
                "directives": []
            },
            "comments": [],
            "tokens": [
                {
                    "type": {
                        "label": "function",
                        "keyword": "function",
                        "beforeExpr": false,
                        "startsExpr": true,
                        "rightAssociative": false,
                        "isLoop": false,
                        "isAssign": false,
                        "prefix": false,
                        "postfix": false,
                        "binop": null
                    },
                    "value": "function",
                    "start": 0,
                    "end": 8,
                    "loc": {
                        "start": {
                            "line": 1,
                            "column": 0
                        },
                        "end": {
                            "line": 1,
                            "column": 8
                        }
                    }
                },
                {
                    "type": {
                        "label": "name",
                        "beforeExpr": false,
                        "startsExpr": true,
                        "rightAssociative": false,
                        "isLoop": false,
                        "isAssign": false,
                        "prefix": false,
                        "postfix": false,
                        "binop": null
                    },
                    "value": "square",
                    "start": 9,
                    "end": 15,
                    "loc": {
                        "start": {
                            "line": 1,
                            "column": 9
                        },
                        "end": {
                            "line": 1,
                            "column": 15
                        }
                    }
                },
                {
                    "type": {
                        "label": "(",
                        "beforeExpr": true,
                        "startsExpr": true,
                        "rightAssociative": false,
                        "isLoop": false,
                        "isAssign": false,
                        "prefix": false,
                        "postfix": false,
                        "binop": null
                    },
                    "start": 15,
                    "end": 16,
                    "loc": {
                        "start": {
                            "line": 1,
                            "column": 15
                        },
                        "end": {
                            "line": 1,
                            "column": 16
                        }
                    }
                },
                {
                    "type": {
                        "label": "name",
                        "beforeExpr": false,
                        "startsExpr": true,
                        "rightAssociative": false,
                        "isLoop": false,
                        "isAssign": false,
                        "prefix": false,
                        "postfix": false,
                        "binop": null
                    },
                    "value": "n",
                    "start": 16,
                    "end": 17,
                    "loc": {
                        "start": {
                            "line": 1,
                            "column": 16
                        },
                        "end": {
                            "line": 1,
                            "column": 17
                        }
                    }
                },
                {
                    "type": {
                        "label": ")",
                        "beforeExpr": false,
                        "startsExpr": false,
                        "rightAssociative": false,
                        "isLoop": false,
                        "isAssign": false,
                        "prefix": false,
                        "postfix": false,
                        "binop": null
                    },
                    "start": 17,
                    "end": 18,
                    "loc": {
                        "start": {
                            "line": 1,
                            "column": 17
                        },
                        "end": {
                            "line": 1,
                            "column": 18
                        }
                    }
                },
                {
                    "type": {
                        "label": "{",
                        "beforeExpr": true,
                        "startsExpr": true,
                        "rightAssociative": false,
                        "isLoop": false,
                        "isAssign": false,
                        "prefix": false,
                        "postfix": false,
                        "binop": null
                    },
                    "start": 19,
                    "end": 20,
                    "loc": {
                        "start": {
                            "line": 1,
                            "column": 19
                        },
                        "end": {
                            "line": 1,
                            "column": 20
                        }
                    }
                },
                {
                    "type": {
                        "label": "return",
                        "keyword": "return",
                        "beforeExpr": true,
                        "startsExpr": false,
                        "rightAssociative": false,
                        "isLoop": false,
                        "isAssign": false,
                        "prefix": false,
                        "postfix": false,
                        "binop": null,
                        "updateContext": null
                    },
                    "value": "return",
                    "start": 30,
                    "end": 36,
                    "loc": {
                        "start": {
                            "line": 2,
                            "column": 9
                        },
                        "end": {
                            "line": 2,
                            "column": 15
                        }
                    }
                },
                {
                    "type": {
                        "label": "name",
                        "beforeExpr": false,
                        "startsExpr": true,
                        "rightAssociative": false,
                        "isLoop": false,
                        "isAssign": false,
                        "prefix": false,
                        "postfix": false,
                        "binop": null
                    },
                    "value": "n",
                    "start": 37,
                    "end": 38,
                    "loc": {
                        "start": {
                            "line": 2,
                            "column": 16
                        },
                        "end": {
                            "line": 2,
                            "column": 17
                        }
                    }
                },
                {
                    "type": {
                        "label": "*",
                        "beforeExpr": true,
                        "startsExpr": false,
                        "rightAssociative": false,
                        "isLoop": false,
                        "isAssign": false,
                        "prefix": false,
                        "postfix": false,
                        "binop": 10,
                        "updateContext": null
                    },
                    "value": "*",
                    "start": 39,
                    "end": 40,
                    "loc": {
                        "start": {
                            "line": 2,
                            "column": 18
                        },
                        "end": {
                            "line": 2,
                            "column": 19
                        }
                    }
                },
                {
                    "type": {
                        "label": "name",
                        "beforeExpr": false,
                        "startsExpr": true,
                        "rightAssociative": false,
                        "isLoop": false,
                        "isAssign": false,
                        "prefix": false,
                        "postfix": false,
                        "binop": null
                    },
                    "value": "n",
                    "start": 41,
                    "end": 42,
                    "loc": {
                        "start": {
                            "line": 2,
                            "column": 20
                        },
                        "end": {
                            "line": 2,
                            "column": 21
                        }
                    }
                },
                {
                    "type": {
                        "label": ";",
                        "beforeExpr": true,
                        "startsExpr": false,
                        "rightAssociative": false,
                        "isLoop": false,
                        "isAssign": false,
                        "prefix": false,
                        "postfix": false,
                        "binop": null,
                        "updateContext": null
                    },
                    "start": 42,
                    "end": 43,
                    "loc": {
                        "start": {
                            "line": 2,
                            "column": 21
                        },
                        "end": {
                            "line": 2,
                            "column": 22
                        }
                    }
                },
                {
                    "type": {
                        "label": "}",
                        "beforeExpr": false,
                        "startsExpr": false,
                        "rightAssociative": false,
                        "isLoop": false,
                        "isAssign": false,
                        "prefix": false,
                        "postfix": false,
                        "binop": null
                    },
                    "start": 48,
                    "end": 49,
                    "loc": {
                        "start": {
                            "line": 3,
                            "column": 4
                        },
                        "end": {
                            "line": 3,
                            "column": 5
                        }
                    }
                },
                {
                    "type": {
                        "label": "eof",
                        "beforeExpr": false,
                        "startsExpr": false,
                        "rightAssociative": false,
                        "isLoop": false,
                        "isAssign": false,
                        "prefix": false,
                        "postfix": false,
                        "binop": null,
                        "updateContext": null
                    },
                    "start": 49,
                    "end": 49,
                    "loc": {
                        "start": {
                            "line": 3,
                            "column": 5
                        },
                        "end": {
                            "line": 3,
                            "column": 5
                        }
                    }
                }
            ]
        }
    }
}
```


------
## Traverse and modify

Now we'll the [Babel traverse library](https://babeljs.io/docs/en/babel-traverse) and a [visitor](https://en.wikipedia.org/wiki/Visitor_pattern) to traverse the AST so that we can make changes to it.

As a trivial example we'll replace identifier with name `n` to `x`. Actually this isn't as trivial as it might first sound. Something like this is the basis of the "refactor rename" tool that's in Visual Studio Code.
------
```typescript
import traverse from "babel-traverse";

traverse(ast, {
    Identifier(path) {
        if (path.node.name === "n") { // Replace name "n"
            path.node.name = "x"      // with name "x"
        }
    }
});
```



------
## Convert back to JavaScript

Now to check the changes we have made to the AST, let's use the [Babel generator library](https://babeljs.io/docs/en/babel-generator) to convert it back to JavaScript code so we can inspect it:
------
```typescript
import generate from "babel-generator";

const generated = generate(ast, code);
display.text(generated.code);
```

######
```json - error
display.text is not a function
 at Code cell, line 4
```


######
```json - output
{
    "value": {
        "displayType": "text",
        "data": "!! An error occurred while evaluating notebook \"notebook-3ce6f2b4-4a12-4abb-b372-c2bbba300db4\" details follow.\n"
    }
}
```

######
```json - output
{
    "value": {
        "displayType": "text",
        "data": "== Filename ==\n"
    }
}
```

######
```json - output
{
    "value": {
        "displayType": "text",
        "data": "notebook-3ce6f2b4-4a12-4abb-b372-c2bbba300db4\n"
    }
}
```

######
```json - output
{
    "value": {
        "displayType": "text",
        "data": "== Error source ==\n"
    }
}
```

######
```json - output
{
    "value": {
        "displayType": "text",
        "data": "Code evaluation\n"
    }
}
```

######
```json - output
{
    "value": {
        "displayType": "text",
        "data": "== Cell id ==\n"
    }
}
```

######
```json - output
{
    "value": {
        "displayType": "text",
        "data": "fb684bf0-7fc6-11ea-981f-79dff3053342\n"
    }
}
```

######
```json - output
{
    "value": {
        "displayType": "text",
        "data": "== Error message ==\n"
    }
}
```

######
```json - output
{
    "value": {
        "displayType": "text",
        "data": "display.text is not a function\n"
    }
}
```

######
```json - output
{
    "value": {
        "displayType": "text",
        "data": "== Error location ==\n"
    }
}
```

######
```json - output
{
    "value": {
        "displayType": "text",
        "data": "<no-location>\n"
    }
}
```

######
```json - output
{
    "value": {
        "displayType": "text",
        "data": "== Error stacktrace ==\n"
    }
}
```

######
```json - output
{
    "value": {
        "displayType": "text",
        "data": "TypeError: display.text is not a function\n    at notebook-3ce6f2b4-4a12-4abb-b372-c2bbba300db4:52:21\n    at C:\\projects\\data-forge-notebook\\data-forge-notebook\\packages\\evaluation-engine\\src\\lib\\code-evaluator.ts:571:17\n    at AsyncResource.runInAsyncScope (node:async_hooks:202:9)\n    at CodeEvaluator.__cell (C:\\projects\\data-forge-notebook\\data-forge-notebook\\packages\\evaluation-engine\\src\\lib\\code-evaluator.ts:563:26)\n    at notebook-3ce6f2b4-4a12-4abb-b372-c2bbba300db4:50:11\n    at C:\\projects\\data-forge-notebook\\data-forge-notebook\\packages\\evaluation-engine\\src\\lib\\code-evaluator.ts:571:17\n    at AsyncResource.runInAsyncScope (node:async_hooks:202:9)\n    at CodeEvaluator.__cell (C:\\projects\\data-forge-notebook\\data-forge-notebook\\packages\\evaluation-engine\\src\\lib\\code-evaluator.ts:563:26)\n    at notebook-3ce6f2b4-4a12-4abb-b372-c2bbba300db4:37:9\n    at C:\\projects\\data-forge-notebook\\data-forge-notebook\\packages\\evaluation-engine\\src\\lib\\code-evaluator.ts:571:17\n"
    }
}
```

######
```json - output
{
    "value": {
        "displayType": "text",
        "data": "== Translated error message and stack trace ==\n"
    }
}
```

######
```json - output
{
    "value": {
        "displayType": "text",
        "data": "{\n    \"display\": \"display.text is not a function\\r\\n at Code cell, line 4\",\n    \"cellId\": \"fb684bf0-7fc6-11ea-981f-79dff3053342\",\n    \"stack\": \" at Code cell, line 4\"\n}\n"
    }
}
```


------
## Further reading

To learn more about parsing JavaScript and writing Babel plugins, please see the Babel Plugin Handbook:

[https://github.com/jamiebuilds/babel-handbook/blob/master/translations/en/plugin-handbook.md](https://github.com/jamiebuilds/babel-handbook/blob/master/translations/en/plugin-handbook.md)
