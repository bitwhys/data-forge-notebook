{
    "version": 3,
    "language": "javascript",
    "description": "Example of loading, transforming and saving a JSON file.",
    "cells": [
        {
            "id": "715b3300-a773-11e8-be47-d189ccafed88",
            "cellType": "markdown",
            "code": "# JSON example\r\n\r\nAn example that shows how to load, transform and save a JSON file using [the Datakit library](https://www.npmjs.com/package/datakit).\r\n\r\n**NOTE**: This example is pretty much the same as *csv-file-example.notebook* except for the file type.",
            "lastEvaluationDate": "2018-10-31T08:52:22.961+10:00",
            "output": [],
            "errors": [],
            "height": 177
        },
        {
            "id": "8d98d040-a773-11e8-be47-d189ccafed88",
            "cellType": "markdown",
            "code": "## Loading a CSV file\r\n\r\nLoad the file \"example.csv\", which is placed to next to where this notebook is saved.",
            "lastEvaluationDate": "2018-10-31T08:52:22.961+10:00",
            "output": [],
            "errors": [],
            "height": 102
        },
        {
            "id": "715b3301-a773-11e8-be47-d189ccafed88",
            "cellType": "code",
            "cellScope": "global",
            "code": "const { readJson, writeJson } = require('datakit');\r\n\r\nconst inputData = await readJson(\"./example.json\");\r\n\r\ndisplay(inputData.slice(0, 3), \"table\");",
            "lastEvaluationDate": "2023-11-07T20:02:32.519+10:00",
            "output": [
                {
                    "value": {
                        "displayType": "table",
                        "data": [
                            {
                                "Name": "Alex",
                                "Sex": "M",
                                "Age": 41,
                                "Height (in)": 74,
                                "Weight (lbs)": 170
                            },
                            {
                                "Name": "Bert",
                                "Sex": "M",
                                "Age": 42,
                                "Height (in)": 68,
                                "Weight (lbs)": 166
                            },
                            {
                                "Name": "Carl",
                                "Sex": "M",
                                "Age": 32,
                                "Height (in)": 70,
                                "Weight (lbs)": 155
                            }
                        ]
                    }
                }
            ],
            "errors": [],
            "height": 311
        },
        {
            "id": "9a0ae3d0-a774-11e8-a675-a582b1f571c7",
            "cellType": "markdown",
            "code": "## Apply a transformation\r\n\r\nLet's convert to the metric system of measurement!",
            "lastEvaluationDate": "2018-10-31T08:52:22.967+10:00",
            "output": [],
            "errors": [],
            "height": 102
        },
        {
            "id": "8a9ad280-a773-11e8-be47-d189ccafed88",
            "cellType": "code",
            "cellScope": "global",
            "code": "const transformedData = inputData.map(row => ({\r\n    ...row,\r\n    \"Height (cm)\": row[\"Height (in)\"] * 2.54,      // Inches to centimeters.\r\n    \"Weight (kgs)\": row[\"Weight (lbs)\"] * 0.453592 // Pounds to kilograms.\r\n}));\r\ndisplay(transformedData.slice(0, 5), \"table\");",
            "lastEvaluationDate": "2023-11-07T20:02:33.006+10:00",
            "output": [
                {
                    "value": {
                        "displayType": "table",
                        "data": [
                            {
                                "Name": "Alex",
                                "Sex": "M",
                                "Age": 41,
                                "Height (in)": 74,
                                "Weight (lbs)": 170,
                                "Height (cm)": 187.96,
                                "Weight (kgs)": 77.11064
                            },
                            {
                                "Name": "Bert",
                                "Sex": "M",
                                "Age": 42,
                                "Height (in)": 68,
                                "Weight (lbs)": 166,
                                "Height (cm)": 172.72,
                                "Weight (kgs)": 75.296272
                            },
                            {
                                "Name": "Carl",
                                "Sex": "M",
                                "Age": 32,
                                "Height (in)": 70,
                                "Weight (lbs)": 155,
                                "Height (cm)": 177.8,
                                "Weight (kgs)": 70.30676
                            },
                            {
                                "Name": "Dave",
                                "Sex": "M",
                                "Age": 39,
                                "Height (in)": 72,
                                "Weight (lbs)": 167,
                                "Height (cm)": 182.88,
                                "Weight (kgs)": 75.749864
                            },
                            {
                                "Name": "Elly",
                                "Sex": "F",
                                "Age": 30,
                                "Height (in)": 66,
                                "Weight (lbs)": 124,
                                "Height (cm)": 167.64000000000001,
                                "Weight (kgs)": 56.245408
                            }
                        ]
                    }
                }
            ],
            "errors": [],
            "height": 375
        },
        {
            "id": "5a096ee0-a775-11e8-a675-a582b1f571c7",
            "cellType": "markdown",
            "code": "## Saving a JSON file\r\n\r\nNow let's save our transformed JSON file to the current directory.",
            "lastEvaluationDate": "2018-10-31T08:52:22.973+10:00",
            "output": [],
            "errors": [],
            "height": 102
        },
        {
            "id": "7dd392b0-a775-11e8-a675-a582b1f571c7",
            "cellType": "code",
            "cellScope": "global",
            "code": "await writeJson(\"transformed.json\", transformedData);\r\n\r\nconsole.log(\"Transformed JSON file has been written to \" + process.cwd());",
            "lastEvaluationDate": "2023-11-07T20:02:33.016+10:00",
            "output": [
                {
                    "value": {
                        "displayType": "text",
                        "data": "!! An error occurred while evaluating notebook \"notebook-9d54337b-e117-4f43-9827-2b66d1c58248\" details follow.\n"
                    }
                },
                {
                    "value": {
                        "displayType": "text",
                        "data": "== Filename ==\n"
                    }
                },
                {
                    "value": {
                        "displayType": "text",
                        "data": "notebook-9d54337b-e117-4f43-9827-2b66d1c58248\n"
                    }
                },
                {
                    "value": {
                        "displayType": "text",
                        "data": "== Error source ==\n"
                    }
                },
                {
                    "value": {
                        "displayType": "text",
                        "data": "Code evaluation\n"
                    }
                },
                {
                    "value": {
                        "displayType": "text",
                        "data": "== Cell id ==\n"
                    }
                },
                {
                    "value": {
                        "displayType": "text",
                        "data": "7dd392b0-a775-11e8-a675-a582b1f571c7\n"
                    }
                },
                {
                    "value": {
                        "displayType": "text",
                        "data": "== Error message ==\n"
                    }
                },
                {
                    "value": {
                        "displayType": "text",
                        "data": "writeCsv is not defined\n"
                    }
                },
                {
                    "value": {
                        "displayType": "text",
                        "data": "== Error location ==\n"
                    }
                },
                {
                    "value": {
                        "displayType": "text",
                        "data": "<no-location>\n"
                    }
                },
                {
                    "value": {
                        "displayType": "text",
                        "data": "== Error stacktrace ==\n"
                    }
                },
                {
                    "value": {
                        "displayType": "text",
                        "data": "ReferenceError: writeCsv is not defined\n    at notebook-9d54337b-e117-4f43-9827-2b66d1c58248:31:9\n    at C:\\projects\\data-forge-notebook\\editor-core\\packages\\evaluation-engine\\src\\lib\\code-evaluator.ts:586:17\n    at AsyncResource.runInAsyncScope (node:async_hooks:203:9)\n    at CodeEvaluator.__cell (C:\\projects\\data-forge-notebook\\editor-core\\packages\\evaluation-engine\\src\\lib\\code-evaluator.ts:578:26)\n    at notebook-9d54337b-e117-4f43-9827-2b66d1c58248:30:7\n    at C:\\projects\\data-forge-notebook\\editor-core\\packages\\evaluation-engine\\src\\lib\\code-evaluator.ts:586:17\n    at AsyncResource.runInAsyncScope (node:async_hooks:203:9)\n    at CodeEvaluator.__cell (C:\\projects\\data-forge-notebook\\editor-core\\packages\\evaluation-engine\\src\\lib\\code-evaluator.ts:578:26)\n    at notebook-9d54337b-e117-4f43-9827-2b66d1c58248:17:5\n"
                    }
                },
                {
                    "value": {
                        "displayType": "text",
                        "data": "== Translated error message and stack trace ==\n"
                    }
                },
                {
                    "value": {
                        "displayType": "text",
                        "data": "{\n    \"display\": \"writeCsv is not defined\\r\\n at Code cell, line 1\",\n    \"cellId\": \"7dd392b0-a775-11e8-a675-a582b1f571c7\",\n    \"stack\": \" at Code cell, line 1\"\n}\n"
                    }
                }
            ],
            "errors": [
                {
                    "msg": "writeCsv is not defined\r\n at Code cell, line 1"
                }
            ],
            "height": 1342
        }
    ]
}