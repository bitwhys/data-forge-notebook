---
version: 4
---
v1.10.0
- Cells are now lazily rendered when the first time they become visible in the viewport.

KNOWN ISSUES:
- The JSON / JS-data visualizer is very bad for performance on large data sets and can hang the notebook editor.
- Visualising large data sets can make the notebook editor run out of memory and crash.

v1.9.6
- Added a new example for performance testing a REST API over time.

v1.9.5
- Removed automated scrolling as much a possible to stop it happening when it's not really needed (which is really annoying).
- Added a new example that shows how to publish a tweet using JavaScript and the Twitter API.

v1.9.4
- Bug fix that effects TypeScript notebooks only. I had made an optimization earlier where the TypeScript dependency was removed from the notebook's package.json file. This broke TypeScript notebooks in the production build of Data-Forge Notebook (but not in the dev build, which is why it slipped through). I've reverted part of that optimisation to fix the problem. Now TypeScript is installed for each TypeScript notebook and the local dependency is loaded for compilation. Unfortunately this makes creating and evaluating TypeScript notebooks a bit slower but at least working functionality is restored. I may try and optimise this again in the future.

v1.9.3
- Improved progress reporting while the application is busy.
- Revised shutdown logic to fix issues quitting.
- Fixed a shutdown crash on MacOS when quitting from the Dock.
- Performance improvements to show the editor window just a little bit quicker.
- Throttled window resize events for better performance when resizing the editor window.
- Switched over to the production version of React!! (for better performance).
- Fixed the positions of various popup menus (including the "New notebook" popup menu in the toolbar) to be at the "bottom" so that the never appear in the wrong place only to be obscured.
- Fixed an issue that was causing all windows to be closed on Windows and Linux when the close button is clicked for only one window. Now only that window is closed.

v1.9.2
- Officials release of Data-Forge Notebook Free - a free version of the application.

v1.9.1
- Test release of Data-Forge Notebook Free.

v1.9.0
- Beta release of Data-Forge Notebook Free.
- New build scripts using Task-Mule for a consolidated cross-platform build and to make it easier to create new builds.
- Implemented automatic update.
- Updated Electron to version 8.2.5.
- Separate intro and example notebooks so it takes less time to install dependencies for the intro notebooks.
- Various other improvements for new user onboarding.
- Fixed issues with capturing local variables for reuse in later evaluations.
- Removed notebook dependencies on Babel and TypeScript because these are built into the application. This makes it quicker to start create/open a new notebook.
- Removed tsconfig.json and .babelrc configuration files. This makes it faster to evaluate notebooks.
- Removed cached new project templates, with the default dependencies and config file removed this is unnecessary machinery that can't possibly improve performance.
- Improvements to intellisense so that declarations in other cells show up.
- Added better error handling for windows that reports errors back to the main log (ensuring that errors are not lost).
- Various fixes to make sure that the DFN can operate with no internet connection (internet is only created to activate the first time).
- Startup performance improvements making it quicker to start the first editor window.

v1.8.1
- Fixed the broken zoom out button in the toolbar.
- Fixed an issue with the command palette that it wasn't being dismissed when the background was clicked.
- Included the Sydney tram network example notebook that was missing in the previous build.
- Fixed an issue with resizing HTML outputs. The iframe in the output wasn't being sized to full height of the cell output.
- Updated example notebook "Sydney light rail map" from Rory Dungan.

v1.8.0
- Major UI overhaul. Let me know what you think!
    - Now pulsing the border of a selected cell to indicate the cell which was selected.
    - Added a new indicator of cell selection state, a bluish bar appears on the left of the selected cell.
    - Cells output are now resizable by dragging!
    - Text in all cell outputs can now be selected and copied.
    - Restructured toolbars and cell buttons to have less popups.
    - Performance improvements for drag and drop rearrangement of cells.
    - The drag and drop 'handle' for cells is now the blue bar on the left.
    - Now correctly preserving the height of markdown cells when switching between preview and edit modes.
    - Doubled the delay of tooltips to make sure they aren't getting in the way unless absolutely needed.
    - Fixed an issue where the geo output was rendering over the top of the command palette.
    - Added buttons for output tools
        - Capture and export screenshot for charts and geo outputs.
        - Export data for other output types. 
    - Implemented find and replace dialogs to search and replace text across a notebook.
    - Cells can be switched between global (the default) and local mode. Global mode is the normal way cell evaluation works in Data-Forge Notebook. Local mode wraps the cell's code in a function (like the JavaScript module pattern) so that it's variables are private and not accessible to other code cells.
- Various updates to the notebook file format (it's now at version 2). If you have any problems loading an old notebook please let me know!
- Now loading Monaco Editor in parallel to the welcome screen, making startup a little bit faster.
- Removed support for C3 charts. To simplify the structure of the UI to make it easier to upgrade.
- Removed the __index__ column from dataframe table preview.
- Data-Forge series are now displayed as JavaScript arrays.
- Updates to the evaluation engine
    - Increased the memory limits in the evaluation engine from Node.js default of around 1.6 GB up to a massive 10 GB. This will really help if you are trying to load large data files.
    - Clearing outputs from the notebooks now also clears errors.
    - Can now evaluate each cellsindividually.
        - Variables are preserved from the previous evaluation of the notebook and can be reused when evaluating a single cell (this works for JavaScript notebooks only, it may work for TypeScript notebooks in a future release).
    - Fixed an issue where circular objects could not be displayed as outputs. Circular references are now removed before display.
- New features for the `display.geo` function: 
    - Icon, size and tooltip can now be set for markers on the map. 
    - See the updated maps example to see how it works.
    - Enabled mouse wheel zooming in the geo output.
- When opening or saving a notebook the current working directory of the application is now set to the directory where the notebook is saved. 
- New examples:
    - Sydney tram frequency notebook, a good example of geographic output.
    - Parsing JavaScript notebook, shows how to parse JS code to an AST with Babel libraries.
- Help
    - Updated link to Node.js docs to v12.
    - Added links to GeoJSON and related resources.
- Bug fixes:
    - Fix to display objects properly. Was using Sugar.Object.isObject... but it only detects simple/plain objects. More complex objects were being passed through the toString function and losing important details.
    - When opening or saving a notebook the default path is now set to the user's documents directory.
    - Now preventing a new notebook from being created while the editor is "working". This fixes the issue that you can could hit Ctrl+N twice, start two "new notebook" actions and hang the editor.
    - Fixed issue in Linux build where the ile ext (.notebook) was not being automatically added when saving a notebook.



v1.7.0
- Fixed export to markdown for the new visualisation functions: display.json, display.plot and display.markdown.
- Added an extra new line when exporting HTML output so that it is separated from subsequent markdown code.
- Added visualization of geometric points on a map.
- Also added support for visualizing geojson.
- Added an example notebook that demonstrates geo visualization.
- Code folding now resizes the height of code cells.
- Added a new example for computing stock price volatility.
- Fixed an error in notebooks exported to the web.
- Added blank lines after code cells and outputs in markdown exports to make table formatting work correctly.
- Fixed indenting for single JavaScript file and Node.js exports.
- Fixed bug that was stripping stack traces from error message that are normally displayed in the notebook.
- Fixed FATAL ERROR detection for Node.js v12.
- Now flushing changes when adding new cells. Previously code updates were being list if creating a new cell just after typing some text.
- Fixed an issue with the progress indicator for NPM installs.
- Fix to ensure that the first cell in a new notebook is automatically focused.
- Fixed intellisense for TypeScript and JavaScript for npm modules that have TypeScript typedefs included.
- Reduced the waiting period before npm modules are automatically installed from 5s to 1s. 

v1.6.3
- Fixed issues with checking for the existence of npm modules. This was causing the knex module to fail to install (and probably many other npm modules as well).

v1.6.2
- Updated from Node.js v10.51.3 to v12.15.0 
- Fixed an issue in the async operation tracker that was not aware that when a subsequent cell resolves an async operationg in an earlier cell hanging evaluation of the notebook.
- Enabled periodic forced garbage collection to ensure that async operations are cleaned up in short order.
 

v1.6.1
- Fixed TypeScript engine to bring it into line with changes (from 1.6.0) to the JavaScript engine for cell by cell asyncrhonous operation tracking.

v1.6.0

- Fixed issue restarting the evaluation engine after it was manually stopped.
- Changed the output cap from 100 to 1000. Your notebook can log 1000 things now before output is disabled.
- Out of memory errors are now handled and an error is displayed in the notebook against the cell which caused the problem.
- Fixed spurious errors coming from an evaluation engine after a fatal error.
- Added functions display.markdown and display.json for rendering markdown and json data.
- DFN now handles display of a circular data structure with a better error.
- Added links to the Help menu to the wiki doc on Visualizating data.
- Now merging using source maps from generated and compiled code so that callstacks can be properly translated for errors in a notebook.
- Improvements to translated error messages and stack traces for errors displayed in the notebook.
- Fixed the command File / Open in Explorer, it was opening to the parent directory of the notebook and not the notebook. Now it correctly opens Explorer/Finder and selects the notebook.
- Fixed spurious issues in the TypeScript compiler. This didn't stop a TypeScript notebook from being evaluated, but it did clutter the notebook output with unnecessary errors.
- Small update to 'save as' feature, the file save dialog now defaults to the directory of the current notebook.
- I found a notebook (one that opens a connection to a Mongodb database) that hangs the sync tracking because it leaves an async operation open. I've completely rejigged the async support so that it doesn't force async operations for cells to complete in order, this seemed a bit artificial anyway and works differently in Node.js when the notebook is exported. I am now managing a separate async context for each cell, this means that async operations for cells can run in parallel now and the ID of the async context is used to figure which cell is executing for the purposes of error reporting. This change allowed me to significantly simplify the async tracking code in the evaluation engine.
- Fixed location of the "insert cell" popup menu in the toolbar so that it doesn't conflict with the scroll position of the notebook.

v1.5.0

- Restructured the main process to include a separate loading and setup screen.
- Updated to Electron v6.0.10.
- Changed hot key Cmd/Ctrl + Shift + N to new window.
- Allocated new hot key Cmd/Ctrl + T to "New TypeScript notebook".
- Fixed syntax highlighting in TypeScript notebooks exported to PNG, PDF and markdown.
- Fixed syntax highlighting in notebooks exported to PDF.
- Got per-cell async tracking working! A cell continues to evaluate and show its progress spinner until all async operations have completed.
- Fixed an issue with settings. If the settings file is broken or corrupted it would cause an error starting DFN, it can now tolerate a broken settings file and reset it to defaults.
- Fixed broken notebook save that was always triggering 'save as' and unnecessarily querying the user for file name.
- Fixed an issue causing an error if a notebook is evaluated too quickly after being quickly, for example while the Babel or TypeScript packages are being installed.
- Enabled the global progress spinner while a new project is being created, this locks you out of evaluating a notebook (or doing anything else with it) before it is ready.
- Now suppressing notebook-related commands and hotkeys while a notebook is being loaded. This state doesn't last very long, but it delays notebook commands can't be run until the notebook is ready. This fixes race conditions with commands that could otherwise be run slightly too early. 
- Fixed issues with window position reset when opening new application windows.
- Got rid of window position persistence, this doesn't work well now that the application allows multiple windows.
- New windows are now cascaded.
- Fixed color of cell "Evaluating" label when an errored cell is being evaluated - it doesn't need to continue to be red to indicate an error, although there might have been an error on the previous evaluation we don't yet know if the new evaluation will result in an error.
- Restructured the welcome screen to put recent files at the top and make better use of screen real estate. 
- Added new function `display.text` to display formatted text in cell output.
- Added TypeScript type definitions for `display.text` and existing functions `display.html`, `display.chart` and `display.table`. These were added so that intellisense works correctly for them when editing a notebook.
- Now when evaluating a partial notebook only the output/errors for the cells being evaluated are replaced and outputs and errors for remaining cells are not cleared.
- Added hotkey help to toolbar menus for creating new cells.
- Unhandled errors and unhandled rejected promises are now displayed within the notebook.
- Added some new example notebooks for Node.js streams.

v1.4.0
- Fixed accelerator keys for menus on Windows. Alt+F can now be use to open the File menu, Alt+E for the Editor menu and so forth.
- Fixed issue with updating notebook UI state after aborting code evaluation.
- Fixed broken markdown export.
- Now downloading the additional Nightmare/Electron modules after DFN is installed. 
    - Reduces the installer from 139 mb down to 63 MB on Windows, 54% saving.
    - Reduces the installer from 167 mb down to 116 MB on Linux, 30% saving.
    - Reduces the installer from 198 mb down to 89 MB on MacOS. 50% saving.
    - The download is done in a hidden Electron window (the new global worker) so as not to negatively impact the main process and notebook editor window.
    - While downloading this package Export to PDF, PNG and markdown feature are unavailable until the download has completed.
- Various performance optimizations for startup time.
- Improved performance when creating or opening a notebook. Also improved performance when doing a 'save as'.
    - The next notebook worker is now preallocated.
    - The next evaluation engine is now preallocated. This makes it quicker to abort evaluation and connect to the new evaluation engine.
- Untitled notebooks now have their own temporary project directory. They used to share this directory, now they have their own separate isolated directory so that packages don't overlap.
- Templates for new projects are now pre-created at startup. Creating a new notebook is now just copying a template project (instead of using npm) that is indexed by a manifest files, so it is much quicker now to create a new notebook.
    - This also means new notebooks can be created offline.
- Multiple editor windows in the same process are now supported. This makes it quicker to create a new editor window once DFN is already started and makes more efficient use of system resources.
- I've re-added the general npm install (removed for better performance), but only when package.json exists but node_modules doesn't.
- Fixes for the Linux build:
    - Example notebooks are now copied to the temporary directory. They weren't working properly when running from the app's read-only file system on Linux, so now they are copied to the DFN temporary directory which is read-write.
- DFN editor windows are now preallocated for so it's much quicker to open a new window.
- Replaced electron-settings module with my own code for managing settings, electron-settings was fighting with itself when writing the settings files and occasionally this would result in lost settings. Wasn't a common problem until I added support for multiple windows to DFN and the problem started happening pretty frequently.
- When loading a new notebook (or saving as) code evaluation is now stopped and the old notebook jobs are now cleared out.

v1.3.0
- Updated Monaco Editor to the latest code.
- Updated Monaco code fixes a hang in Monaco Editor when loading a notebook with a large amount of TypeScript type definitions.
- Added proper support for tracking a notebook's asynchronous operations.  The evaluation of each cell now awaits completion of that cell's async operations before moving on to evaluate the next cell.
- The TypeScript config file is now generated (if not existing) or loaded from (when existing) tsconfig.json next to the saved notebook.
- The Babel config file is now generated (if not existing) or loaded from (when existing) .babelrc next to the saved notebook.
- Fixes to Node.js local path so that version number doesn't have to be repeated.
- Fixed issues with npm caching which means that npm modules install much faster when installed from the cache (eg the second time a module is installed is much faster). Using the --prefer-offline flag. This makes it much quicker to create a new notebook because required modules (eg those required for Babel or TypeScript) are installed much more quickly the second time a new notebook is created.
- Now invoking npm only once for multiple module installs. This makes it faster to start work after creating, saving or opening a notebook. Npm installs are still very slow however, I'm considering changing to yarn in the future.
- Now attempting to install peer dependencies and typedefs for npm modules that may have those. This offers a performance improvement for creating, saving or opening a notebook.
- Significantly restructured the progress reporting mechanism that let's user know what background jobs are in progress. This is much more reliable now.
- Fixed a bug with 'save as' that was causing a hang. The message being sent to the hidden window to start the notebook init background task was being dropped because it was being received by the hidden window after it had been created but before the appropriate event handler had been installed.
- The popup progress reporter now contains a tree of "jobs" so you can see how they are related hierarchically.
- Background notebook initialisation is now tolerant for notebooks with missing or badly named npm modules. These errors are no longer reported when you load the notebook, but they are still reported when you evaluate the notebook.
- When opening a recent notebook that no longer exists only a single error notification is displayed now, instead of the two previously displayed.
- Restructured the way default modules and user modules are installed so that they are done in parallel for faster creating, saving and opening of notebooks.
- Restructured evaluation code for better progress reporting and immediate feedback on the run/stop button.
- Added better progress reporting for tasks performed while evaluating code.
- Now installing peer dependencies and TypeScript type definitions in parallel for better performance in creation, saving, opening and evaluation of notebooks.
- Bumped up the time before doing an automatic npm install from 1s to 5s. It seemed to sensitive.

v1.2.1 (MacOS only patch release)
- Fixed issue with the -psn argument that has been passed in by MacOS. Reported by Brian Johnson.
- Fixed an issue with line endings for MacOS and Linux in the TypeScript code generator. Issue reported by Brian Johnson.


v1.2.0
- Removed creation of hidden window on start up, this is unecessary because it isn't needed until a notebook is created or opened. This improves startup performance slightly.
- Now have progress reporting for the async notebook background initialization and tasks that are being performed in the background by the hidden window.
- Restructured progress reporting to now report all npm module installation during notebook creating, loading, code evaluation and export.
- Made improvements to the progress reporting UI.
- Added opt in performance statistics collection that will help us understand and improve performance.
- Now optionally recording performance of all sorts of tasks (start time, open notebook, export notebook, etc) to understand where DFN needs performance improvements.
- Moved remaining export jobs (export web and markdown) to background jobs so they don't block the UI.
- New example notebook: Computing speed of a person based on distance and time between server pings, contributed by Rory Dungan.
- Fixed annoying automated scrolling issues (aka the jumpy scrollbar) when editing code cell (especially large code cells that go off the screen).
- Fixed problems reporting errors from the hidden window (where background jobs happen so as not to lock up the UI).
- Performance improvements to the code evaluator so that code evaluation starts more quickly after clicking the Run button.
- The app now distinguishes between background jobs that were directly initiated by the user (eg code evaluation or code export) and those that weren't directly initiated (eg background notebook initialisation and automatic npm module installs). Now when you go to quit the app it only asks for you confirmation when there is a directly initiated background job in process, eg you are evaluating code, are you sure you want to quit?
- Removed a complete separate copy of the Monaco Editor code. This saves quite a bit of space!
- Fixed a small issue where installation of an npm module was being reported twice in the progress popup.
- Moved the code for automatic npm installation (while you type code) to a background job for better performance in the UI.
- Improved error message displayed to user when async background initialization for a notebook has failed.
- Changed the way messages and errors (toasts) are displayed so that multi-line messages work.
- Improved UI for notifications and notification action buttons.
- Improvements to the command palette:
    - Removed the limit of displayed commands in the command palette after discovering that a search can cause relevant commands not to be listed.
    - The command palette is now searched by exact match rather than fuzzy match and this makes it easier to find relevant search results.
    - Fixed a problem navigating the command palette using the arrow keys, you could select an item in the list that was offscreen. Now it automatically scrolls the offscreen item into view.
    - Revised the layout and content of the command palette to make it give more information and be easier to read.

v1.1.0
- Added MACD example to the financial indicators example notebook.
- Added a menu item that allows a user to deactivate Data-Forge Notebook on the computer.
- Now using a DNS redirect to link to the getting started video so that I can upgrade the video later.
- Added an annotation to prompt a new user to open the intro notebook.
- Added a link in the Help menu to the Node.js docs.
- Fixed issue with web exports to allow them to work when published to GitHub pages.
- Added improved fonts to web exports.
- Fixes for wide (horizontally scrolling) code and output cells in the editor and web exports.
- Fixed issue with border alignment between output cells in web exports.
- Removed the "Source Code Pro" font from code cells for web exports. Now just using the default Monaco Editor font.
- Web exports are no longer obfuscated/minified.
- Restructured the compiler framework to support separate language pathways. This has allowed me to separate code generation for JavaScript and TypeScript. 
- Introduced the Babel compiler to preprocess JavaScript code prior to evaluation. This is primarily to support ESM module imports, but also allows all the latest greatest JavaScript features to be used.
- Refactored most of the export tasks into background jobs for better UI performance during exports.
- The TypeScript compiler now targets ES2017 for native async/await code. This substantially simplifies the generated JavaScript code.
- Fixed issues with TypeScript compilation that was causing module imports not to work.
- TypeScript typedefs are now always installed so that intellisense can work for JavaScript as well as TypeScript.
- Fixed an issue on PC where it was possible for DFN to use the installed version of npm instead of the bundle version which can lead to a version mismatch between Node.js and npm in some cases.
- Removed the npm general install that was happening whenever a notebook was created, opened or saved as. The intent of this was making the application bullet proof, if you had a npm module listed in your package.json it would automatically get installed, but it turns out to be very slow and most of the time it's unncessary so I'm taking it out for the moment (it might return later if I could find a way to make it fast).


v1.0.0
- Version 1 release after one year of development!
- Fixed failure to export to code (single file and Node.js project) after moving to proper source-maps for error reporting.
- Changed the way that 'unsaved' notebooks are distinguished from 'saved' notebooks. An unsaved notebook (say a newly created notebook or a notebook downloaded in memory from the internet must go through 'save as' to be be saved in the file system).
- Added support for notebooks loaded from readonly files. This is mainly for the example notebooks in the Linux distribution which are stored in a read only file system. When an attempt is made to save a readonly notebook the 'save as' dialog is invoked so the user can choose another place to save the notebook and not overwrite the original readonly file. Also readonly notebooks can't be evaluated, the user must save them somewhere in order to run them. More work needs to be done on this so that example notebooks work seamlessly out of the box on Linux.
- Added a menu item to the File to create a new window of the application.
- Added more options for help to the welcome screen.
- Added application icons.
- Restarting DFN used to delete the temporary workspace, this isn't really compatible with running multiple instances of DFN so I've removed it. Soon I'll need to change it so that each instance or maybe even each untitled notebook as it's own temporary directory.
- Start up performance improvements.
- Added a prototype "command scripting" feature that allows a headless DFN to be automated, I'm using this in the first instance for automated testing.

v0.23.1
- Updated from Electron 5.0.0 to 5.0.2 to fix menus under dark themes in Ubuntu.
- Reverted back to original font for Monaco Editor as changing to Source Code Pro causes problems.
- Further refinements to background jobs to avoid locking up the UI.
- Now aborting all background jobs when changing notebooks.

v0.23.0
- Improved error handling that allows errors to be marked against the originating cell even if the code was called from a function in a different cell.
- Now using proper source maps to translate error messages and stack traces back to a notebook. Simplified TypeScript code compilation.
- Added cut, copy and paste of whole cells (with hotkeys Cmd/Ctrl+Shift+X, Cmd/Ctrl+Shift+C and Cmd/Ctrl+Shift+V).
- Now flushing code changes when changing from edit to preview mode in markdown cells, previously switching modes was causing recent changes to be lost.
- Full paths are now displayed for recent files in the welcome screen.
- Restructured and refined the welcome screen.
- Moved help annotations (that point out run and add cell buttons) from welcome screen to the first notebook that a user opens.
- Added new help annotations to welcome screen to point out new notebook and open notebook buttons.
- Added warning notifications for notebook commands that are invoked when no notebook is loaded (eg when the welcome screen is displayed).
- The escape key now exits edit mode when editing a markdown cell.
- Changed markdown general font to Noto Sans and code font to Source Code Pro.

v0.22.0
- Added "Create an  issue" to welcome notebook.
- Added links to the welcome notebook for sharing on social media.
- Fixed issues with obscured tooltips.
- Added hotkeys for moving cells up and down (Ctrl/Cmd+Shift+Up and Ctrl/Cmd+Shift+Down).
- Fix a problem with move-cell-up (it was moving cells down!)
- Removed various unecessary and annoying notifications.
- When a file is opened it's new entry in the recent file menu replaces all previous entries.
- Now restoring caret position after flushing code changes (to prevent the caret from being reset on save and other actions).
- Removed the firewall popups that appear when exporting a notebook to PNG or PDF.
- Line numbers are now only displayed for the selected cell.
- When the Monaco Editor cursor goes off screen the notebook is now scrolled automaticallly to make it onscreen.
- Now disposing Moncao Editor events to prevent memory leaks.
- Fixed an issue with automatically scrolling new cells into view.
- Fixed an issue with clicking markdown links on Linux.
- Fixed issue with loading file associations on MacOS.
- Removed menu and toolbar button for the welcome screen.
- Fix to wrap error messages that were previously overflowing offscreen.
- Revised error handling code to fix multiple issues reporting error locations and stack traces for JavaScript and TypeScript notebooks.

v0.21.0
- Upgraded to latest version of Electron and Electron-Builder.
- Trimmed examples/node_modules from the DFN installer slashing it's size by more than 32% (224mb to 151 mb on PC).
- Trimmed extra copy of Electron from the installer cutting the size gain, now up to 37% (224mb to 141 mb on PC).
- Various fixes relating to the new charting library.
- Can now switch charts between ApexCharts and C3. Although I'd like users to be able to easily switch between different JavaScript visualization libraries, I'm not yet sure if I'll keep C3 in the mix, but it makes for a good proof-of-concept.
- Added some virtual blank space at the bottom each notebook.
- Added a new example showing various types of charts that can be created with Data-Forge Notebook.
- Moved the pre-cell run button to the top of the code cell.
- Fixed z-index of the toolbar so that it isn't obscured by the chart toolbar.
- Fixed issue with command "focus-next-cell", it was displaying an error when no cell was selected. Now it simply selects the first cell in the notebook when no cell is currently selected.
- Added menu items to
    - Open the current notebook in Explorer/Finder.
    - Copy the path/name of the current notebook to the clipboard.
- Now flushing text changes before saving, undo/redo and code evaluation. This makes that small text changes are never lost when performing an action.
- Significant restructuring of the connection to the evaluation engine to make it more robust and reliable in the face of errors and disconnections.
- TypeScript type definitions are now loaded in the background so that the UI doesn't hang just a notebook has been loaded.
- Automatic npm install that is done when a notebook is loaded or as the user types code is now done as a background job so that UI performance isn't impacted.
- Can now copy and paste 'console.log' output that is visible in a cell's output.
- Can now copy and paste error output from a cell.
- Fixed issues with the progress indicator while loading a notebook.
- The size of the library Data-Forge Plot has been cut significantly so that it downloads quickly when used in a notebook to plot a chart.
- Renabled npm module caching. This makes it faster to install npm modules after they have been previously installed.
- Now have separate "welcome" and "intro" notebooks.
- The "Welcome" page is now displayed on every startup.
- Added a link to the welcome notebook to open the intro notebook.
- Added a menu item and button to be able to open the "Welcome notebook".
- Added a menu item and button to clear all outputs from a notebook.
- Added a menu item and button to restart the evaluation engine.
- Improvements to the "welcome notebook" for new users.
- Performance improvements for layout of the Monaco Editor. Improves responsiveness when typing in code and markdown cells.
- Clicking on a link in a markdown cell no opens the link, but no longer changes the cell to edit mode.
- Added file associations so that double clicking a notebook in the operating system opens Data-Forge Notebook.
- Added a protocol handler so that links starting with notebook:// open Data-Forge Notebook.
- Added a link to the welcome notebook to open the intro example notebook.
- Made the toolbars buttons small and minimal.
- Insert cell button is now only shown when a cell is mouse hovered.
- Fixes to allow intellisense to work again.

v0.20.1
- Fixed various issues with charts.
- Added function 'display.chart' that can be used to directly display a chart without using data-forge-plot.
- z issue where cells where expanding to fit new lines but not contacting when lines have been removed.
- Disabled automatic scrolling because it's really annoying when editing a large cell (and the browser seems to scroll half decently anyway). Ultimately I need to track the cursor position within the cell and scroll to make it visible only when it isn't visible.
- Fixed date format in the financial indicators example notebook.


v0.20.0
- Big change: Integrated thew Apex Charts library for much better looking charts!
- Restructured the way notebooks are created/loaded for better performance.
    - The general npm install is now done only when a notebook is opened, this makes the first code evaluation a bit quicker and doesn't impact load performance much because it is done in parallel with other tasks when a notebook is loaded.
    - A newly loaded notebook is scanned for npm modules that referenced but not installed and then automatically installs them.
- npm modules are now automatically installed as a user is typing.
    - @types type definition modules are also automatically installed while a user is typing in a TypeScript notebook.
- Tweaked border and background colors for better contrast.
- Improved performance while typing in code/markdown cells.

v0.19.1
- Restructured the version number to allow for point releases.
- Fixed an issue where new cells couldn't be added to the default notebook.

v0.0.19
- Big feature: TypeScript support! Including:
    - Creating and evaluating TS notebooks.
    - Having enhanced intellisense/autocompletion for TS notebooks.
    - Use TS import statements and have the npm modules automatically installed.
    - Exporting TS notebooks to Node.js TS projects.
        - This includes package.json commands to run and build the TS project.
        - I've also modified the regular JS notebook export to Node.js to include a 'start' script in the package.json.
    - Exporting TS notebooks to single TS files.
    - Exporting TS notebooks to PDF, PNG, HTML and Markdown formats.
    - The TypeScript configuration file (tsconfig.json) and package file setup is automatically done for you.
- Improved intellisense/auto-completion across the notebook.
- The Data-Forge Notebook display functions now work with intellisense/auto-completion.
- Fixed issue with the "Installing <npm-module>" progress message.
- The "General npm install" message is now removed when code evaluation is cancelled.
- TypeScript import statements are automatically hoisted out the code cells and inserted into global code.
- Each instance of Data-Forge Notebook now starts and communicates with its own unique evaluation engine process. This means that multiple instances of the Data-Forge Notebook application can be open without interfering with each others code evaluation.
- Improvements to application startup:
    - Removed creation of an unnecessary instances of the evaluation engine.
    - Removed redundant creation of empty notebook on startup. This is now unecessary because it is always replaced with the most recently opened notebook or the default starting notebook.
- Updated the embedded Node.js version to 10.15.3 LTS.
- Made some changes to the structure of Notebooks that are exported to the web. This is to allow exported Notebooks to be directly used in GitHub pages.
- The 'general npm install' is now only done once per notebook.
- Changed from Mocha to Jest for testing.
- Big performance fixes: Restructured the undo/redo system for much better performance.
    - Drag and drop moving of cells can now be undone.

v0.0.18
- Added new example notebook that shows how to load, transform and save data stored in a MongoDB database.
- Fixed an issue where saving a notebook sometimes discards a recent edit.
- Fixed issues with syntax errors not being displayed correctly in cell output.
- Additions and improvements to example notebooks: viz, financial indicators, Alpha Vantage example.
- New examples for accessing mongodb from Data-Forge Notebook.
- Fix to markdown cells so that they can be clicked and edited when new.
- Fixed an issue with markdown cells that was preventing them from being scrolled into view when first added or when later focused or selected.
- Fixed an issue with the popup menu that inserts cells. It wasn't being dismissed after clicking and the new cell wasn't being focused correctly.
- Fixed an issue that would scroll a cell fully into view when the cell evaluate button is clicked. In this case the evaluation would not happened until the button was clicked again. Now clicking the cell evaluate button doesn't select or attempt to scroll the cell into view and the first click triggers the evaluation.
- Markdown cells can now be edited while code is being evaluated.
- The "insert cell" button in the toolbar is now a dropdown that allows any type of cell to be added.
- Cells (code or markdown) can be inserted above or below other cells (previously only below).
- When inserting a cell (code or markdown) and no other cell is selected the cell is inserted at the top or bottom of the notebook depending on whether you select the above or below option.
- When selecting or focusing a cell, the cell is only scrolled into view when it is not visible. If the cell is partially visible then no attempt to scroll it into view is made. Previously select a visible cell would cause it scroll to the middle of the window, which was a bit annoying.
- Fixed issues with syncing inserted cells to the evaluation engine.
- Fixed issues with scrolling a cell into view when you have added a new line that is offscreen.
- A progress indicator is now displayed while opening notebooks.
- Cut down the amount of example data that's included with the examples. It was taking way too long to process so it's not great for a first example.
- Clicking on a link in a markdown cell now opens the link in the system browser. I've changed the markdown renderer from react-remarkable to react-markdown to achieve this.
- A general npm install is now done before each evaluation, this ensures that any manual changes to a notebook's package.json are accounted for.

v0.0.17
- Fixed 'eval cell' command so that it operates on the cell when the 'run' button next to the cell is clicked. Previously in this situation it would have just run the entire notebook.
- Added function `display.table` that can display an array or object as a table.
- New examples: Various Grademark example notebooks that show how to do monte carlo simulation, add a trailing stop loss and how to optimize a strategy.
- Now catching c3 errors for invalid charts. Previously these wiped out the entire notebook leaving just a blank screen. Now if the user somehow manages to generate an invalid chart definition the error is handled, the chart is left blank, but it doesn't wipe out the notebook.
- Fixed a bug that made it impossible to insert a markdown cell below another cell (it was only possible to insert a code cell).
- Clicking on the delete button for the markdown cell was invoking edit mode, it then required a second click to actually delete the cell. This is fixed now. A single click on the delete button is now all that's needed to delete a markdown cell.
- Fixed the scrolling of cells into view when the cell is edited. Previously this attempted to scroll the code cell and it's output into view which, for cells with large output, resulted in the cell editor being scrolled offscreen whilst being edited. Rather annoying, so now the code only attempts to scroll the cell editor portion of the cell into view.
- Fixed the Ctrl-R hotkey to run a cell when no cell is selected, this now defaults to running the entire notebook.
- Start up performance is slight improved due to the removal of redundant code.
- Added '--default' command line arg that instructs Data-Forge Notebook to only load the default starting notebook and not to load the most recently used notebook.
- Big internal restructure of the way actions and commands work so that actions have a context that can include cell, sheet and notebook.
- Started using Spectron for automated Electron testing.
- Add more links and resources to the Help menu.
- Cells are no longer disabled when evaluation is in progress, you can edit your code even while it is being executed. This works because execution takes a snapshot of the code, then executes the snapshot - so it runs the code as it was when you clicked the run button.
-  Added minimum height of 1em to markdown cells so that it's easier to select them by clicking.
- When opening a notebook from the MRU list, the current path for the open file dialog is updated to the path of the notebook that was opened.
- Now displaying callstack and line numbers when an error is reported for a cell.
- Enabled line numbers for cells in Monaco editor.
- Fixed issue with automatic installation of npm module peer dependencies: previously any module that requires a peer dependency would force the dependency to be installed even if the was a later version already installed. This has been fixed and peer dependencies  are only installed only when they haven't previously been installed.
- Restructured and added automated testing for the code evaluation engine.

v0.0.16

- Fixed the progress spinner in the production build.
- This version brings some big internal structural changes:
    - Removed react.di/inversify. It was too complicated to get what I wanted out of it and I suspect that it introduces unecessary performance overheads into the React component hierarchy. I've rolled my own simple dependency injection to take it's place.
    - Split the current model out into model and view-model (React compoonents make up the 'view' part of the MVVM equation here). This has allowed me to restructure the system to make it easier to manage cell selection, focus, scrolling cells into view, setting the caret position in the editor and more details like that. This and the new dependency injection system have paved the way for better unit testing of the UI. This change also allow me to better control the performance UI rendering and event handling.
    - These changes should have little or no bearing on behaviour, but please keep an eye out for new issues.
- Fixed an issue when exporting Node.js projects. In a previous release I had started appending " export" with a space into the directory for exports and unfortunately "npm init -y" which I was using to create Node.js package files doesn't work when the containing directory has spaces (which seems a bit shortsighted of them). I've replaced "npm init -y" with some code that directly writes a generated package.json file.  
- UI fixes to ensure that newly added cells are automatically selected, focused and scrolled into view (when necessary).
- The commands to insert cells under the currently selected cell now insert at the end of the notebook when no cell is currently selected.
- The buttons between cells for inserting new cells have been replaced with a subtle hover menu that does the same thing but has less visual footprint on the notebook.
- The buttons between cells for inserting new cells now insert directly after the cell with the button, rather than under the selected cell or the last cell if no cell is selected.
- When output is appended to the selected cell, it is now scrolled into view so that the cell you are currently working with is always made visible.
- Fixed various issues with the command palette.
    - The command palette now automatically closes whenever you invoke a command. Previously it only closed when enter was selected, but not when you clicked a command with the mouse. Now both ways of invoking a command cause the palette to close.
    - Adjusted the z index for the readonly code editor overlays so that they render beneath the command palette.
- Fixed an issue with the layout code that was causing the scrollbar to automatically scroll backward while you are typing or deleting code.
- DFN now remembers and reopens the last notebook you were editing, so long as that file still exists (otherwise it creates the default notebook).
- Added new Help menu with links to documentation, resources and examples.
- Output and errors no longer mark a notebook as modified.
- When you open a file through the recent files menu, it no prompts you to save the current file if it has been modified.
- An error notification is now issued when you try and open a recent file that has since been deleted.
- Slightly increased display duration for information and warning notifications. 
- Error and success notification now remain on screen until dismissed by the user.
- The vertical scrollbar is now reset when opening a different notebook.
- Made a fix to the way requires are detected in the code to cover more variations of require statements.
- When creating a new notebook there is always 1 code cell by default and it is automatically focused.
- Now using Electron shell open function to open folders and files for the user, this should be more cross-platform and not have problems on Linux.
- Now limiting the times when the evaluation engine is restarted. It is restarted when a new notebook is created or another notebook is opened. It is no longer restarted when undoing and redoing changes to the notebook, this is better for performance.
- Undo / redo now sets the notebook modified flag.
- Adding, deleting and reordering cells now sets the notebook modified flag.
- New example notebook: loading a Node.js code module from the same directory as the notebook.
- The Monaco Editor intellisense popup is no longer clipped to the edge of the code cell, instead it is displayed in its entirety.
- Big feature: TypeScript notebooks are now supported.
- Restructured the cell buttons into a popup cell menu.
- Fixed the z-index of the toolbar so that it doesn't obscure tooltips and popups.

v0.0.15

- Fixed issues with error reporting. Removed the text 'Fresh' that was being displayed in errors.
- Removed debug logging of environment when running commands within DFN. This was an unnecessary performance drain.
- Important feature: npm peer dependencies are now automatically installed.
- Creating a new notebook now creates an empty notebook ready for the user to start working. The default notebook (the first notebook that appears when you start DFN) is still the same introductory notebook. Clicking the "New notebook" button or menu item (or using Ctrl/Cmd + N) essentially creates a completely blank notebook.
- DFN now supports a 'recent files list' allowing you to quickly open any notebook that you have recently opened.
- DFN now asks you to confirm when quiting when jobs are in progress (eg export or code evaluation).
- When exiting, creating a new notebook or opening another notebook - and the current notebook is modified but not saved - DFN will ask you if you want to save, don't save or cancel the operation.
- Tweaked the integration of the Monaco editor so that it fits better and more seamlessly within Data-Forge Notebook.
- Markdown cells now stay the height when switching between preview and edit modes, making the transition less jarring.
- Tweaked styling of code and markdown cells and fixed problems with selection, focus and cell highlighting.
- Improved responsiveness of general cell selection.
- Improved responsiveness of switching markdown cell between preview and edit modes. 
- Big feature: Implemented undo / redo.
- Proper use of 'debounce' to reduce events fired while user is typing and improve performance of the code editing experience.
- Swapped the icons for the zoom buttons in the toolbars after a user made me aware they were opposite to the common convention. I also improved the tooltips of these buttons to make more sense.
- New example notebook: Grademark backtesting API first example.
- Moved the Quit menu from the File menu to the app menu on MacOS.  

v0.0.14

- JavaScript and Data-Forge cheat sheets updated: Added examples of loading data from a REST API
- npm modules and caching
    - npm modules for a notebook are now stored in the filesystem next to the notebook. A package file for the notebook is also generated in this directory. Modules are installed and the package file is created when the user evaluates a notebook.
    - This allows users to easily see and control npm modules for their project. npm modules are still automatically installed as needed.
    - npm modules are now cached for faster download. The first time a module is download it takes the full amount of time, if you subsequently use those modules again in other notebooks they will be cached and will install much more quickly
    - Bundled default modules have been removed from the installer, this reduces the size of the DFN installer and removed the first run 'setup step' that copies default modules to the notebook directory. The downside to this is that the 'default modules' are installed the first time code is evaluated (subsequent installs will be very fast due to npm caching). The initial wait for the first evaluation is too long though and I'm considering removing default modules altogether, I'm still thinking through the implications of the particular design change.
    - The first time 'setup step' when the app is first run has been removed. Removing this setup step makes the app more reliable at starting up the first time. 
    - Big change: Bundled default modules have been removed from the installer and the Data-Forge libraries no longer have any special privilege in DFN.  I did this mostly to completely eliminate the 'one time setup step' but also to reduce the size of the installer. I did consider having these modules lazily installed for each notebook, but that turned out to significantly delay the time to execute a new notebook, even an empty notebook that doesn't use these modules! Of course Data-Forge and related libraries can still be used, they just have to be required in the usual Node.js way.
    - A global temporary directory is still required for installing modules, but only for new/untitled notebooks that aren't yet committed to disk. This temporary directory is automatically cleaned up whenever DFN is restarted, so it doesn't add any permanent clutter to a user's filesystem. However the npm cache directory is persistent because it's important for ongoing performance.
    - Local modules can now be required into a notebook without DFN attempting to install them via npm.
- Big feature: Notebooks can now be exported to markdown format.
- Added toolbar buttons to zoom in and out the notebook. I've added this for demonstrating DFN on projectors. Later I'll add keyboard hotkeys and remember the current zoom level.
- Hotkeys and keyboard navigation:
    - Added new commands and hotkeys for keyboard navigation:
        - Ctrl/Cmd + Up = Focus next cell
        - Ctrl/Cmd + Down = Focus previous cell
        - Ctrl/Cmd + Alt + Up = Focus top cell
        - Ctrl/Cmd + Alt + Down = Focus bottom cell
    - When using keyboard navigation to change to a cell, it is automatically selected and acquires keyboard focus.
    - When a cell is selected it is automatically scrolled into view.
    - I've swapped around the run command hotkeys:
        - Ctrl/Cmd + R - run code to the current cell, or entire notebook when no particular cell is focused.
        - Ctrl/Cmd + Alt + R - always run code for the entire notebook.
    - Added hotkeys for inserting new cells after the current cell:
        - Ctrl/Cmd + Alt + Enter - Inserts a new code cell below current cell.
        - Ctrl/Cmd + Shift + Enter - Inserts a new markdown below current cell.
        - Ctrl/Cmd + Alt + D - Delete the selected cell.
    - When a cell is deleted, the next cell is now automatically selected. If there is no next cell then the previous cell is selected instead.


v0.0.13

- Cut the size of Data-Forge Notebook! On PC the installer was 227 mb and installed 865 mb. Now I have eliminated unecessary copies of Electron and redundant dependencies in the build and cut the size to 115 mb for the installer and 593 mb installed.
- Fixed some issues in the code exported for single JS file and Node.js project.
- Added missing default modules to exported Node.js project.


v0.0.12

- Reset the project directory in the hope of fixing a startup issue experienced by Timur.

v0.0.11

- Data-Forge Notebook now has a command palette like Sublime Text or Visual Studio Code. Press Ctrl+Shift+P to display it.
- Hotkeys are now displayed in menu items, tooltips and the command palette.
- Added new hotkeys:
-- Ctrl + R to evaluate/run the current notebook.
-- Ctrl + Alt + R to evaluate/run up to and including the current cell.
-- Cmd + Q to quit on MacOS.
- Export a notebook to a single JavaScript file.
- Export a notebook to a Node.js project.
- Improvements to menus on MacOS.
- Added buttons between cells to add new code and markdown cells between existing cells.
- Added buttons to move a cell up or down.

v0.0.10

- Big feature: You can now 'capture' your notebooks to PNG and PDF files.
- Finalized the export to HTML feature: Restructured the export for a better result. Resulting exported HTML for notebooks now bundles all the code required without having to do an 'npm install'. Various visual improvements to the exported notebook.
- Fixed an issue where syntax errors could accumulate after a cell each time it is executed. Old errors are now flushed out each time the notebook/cell is evaluated.
- Fixed an issue where using Save As to save a notebook to a different folder didn't update the 'current working directory' for the notebook.
- Fixed selection of text in cells. You can now select text and copy it from a cell's output.
- Added new File menu item 'Open example' that allows you to directly open an example notebook (DFN includes a bunch of example notebooks).
- Various small UI fixes and improvements.
- Added CSV and JSON data examples to the JS cheat sheet.

v0.0.9

- Fix for running on older versions MacOS for Timur Carpeev. Timur was seeing a rendering issue. After research I figured it was related to GPU/hardware acceleration being enabled (seems to be a common issue for Chrome and Electron apps). I though that disabling the issue in code might solve it, but it actually reproduced the issue for me which then allowed me to fix it. In the end it was as simple as not having a background colour set to for the body element and for some reason when HW acceleration is disabled this causes the background not to be cleared, resulting in the graphical build up of garbage that Timur was seeing. Timur actually hinted early on that the the background color might be at fault. 
- The 'Open log file directory' menu item has been fixed for MacOS.

So this release sets the background colour to prevent this issue on older MacOS. Timur confirmed that it worked for him.

v0.0.8

- Default node modules are now bundled with the DFN installer - there is no longer an expensive one-time init process that downloads dependencies, all core dependencies are included (both Node.js and npm modules). This makes the installer much bigger, but I think it's a good trade off because it makes DFN quick to start up and get coding without having to wait for any external dependencies to download. This also makes DFN more reliable, because previously if the one-time init failed (because a download failed) it would have possibly leave DFN in an unusable state as I'm sure some of you have already seen.
- Better startup performance.
- Generally better runtime performance.
- Generally better runtime stability.
- Added a menu item (Setup -> Open log file directory) to open the directory that contains the DFN log file. This will make it easier for you to find and review the log if problems occur.
- Various improvements to the UI, including moving the 'cell delete' button back to its original position next to each cell.
for you to find the log file when reporting issues.
- There's some new examples for charting and data viz.
- Massive change: The evaluator engine has been overhauled. It now treats your notebooks as though it were a single JavaScript file. You can evaluate the code up until a particular cell or you can evaluate the entire notebook. The design of it has been changed so that it replicates the normal process of JavaScript coding - it is therefore easy to learn, you should be able to follow any Node.js JavaScript tutorial by typing the code into a notebook. To this end the 'input' and 'output' functions have been removed, if you don't know what those are then this change won't affect you. If you liked the idea of how the 'input' and 'output' functions made it possible to construct a 'data pipeline' then fear not these functions will make a return in a later release as an 'optional extra'. This big change paves the way for the feature to export production JavaScript code from your notebooks.
- Added internal capability to designate code cells as having local scope. I had to add this to preserve the behaviour of some of the example notebooks. By default code cells that you add to a notebook are global (eg variables they define are in the global scope). There is no way yet for you to add local code cells via the UI, but this is something I will add in the future - it's really useful when creating examples like the JavaScript cheat sheet that's included.


v0.0.7

Node.js is now embedded in the installer and doesn't not need to be downloaded after DFN is installed.
Generally better startup performance.
Added new examples for working CSV files, JSON files and rendering charts.
Fix: Can now copy and paste your licence key into the input field on MacOS.

v0.0.6

Upgraded and restyled the UI. Now using Blueprintjs instead of SemanticUI.
Removed manual resizing of the code editor.
Markdown cells are now simply clicked to be edited.

First pass at the export notebook feature. This allows you to export a notebook to HTML.

Cells can now be rearrange by drag and drop.

Improved startup performance of the evaluation engine.

Made the first edit of the Data-Forge Notebook wiki. You can find it here: https://github.com/data-forge-notebook/examples/wiki
Please feel free to contribute.

v0.0.5

Trim the whitespace in the cell after the cursor is no longer active in it, whether the markdown or code cell. 
Requested by Sean Hoar

Various improvements for stability, reliability and performance.

New examples: web scraping demo, JavaScript cheat sheet from my book Data Wrangling with JavaScript.

New feature: Display HTML and allow devtools to inspect (useful for web scraping).

The current working directory for code evaluation now defaults to the parent directory that contains the notebook. This allows data files to be easily loaded when they are placed in the same directory as the notebook. See the new 'file-system-test.notebook' for an example.

Added a menu item that allows the one-time setup to be obliterated and redone. This means if there is something wrong with the default setup (Node.js + default npm modules) they can easily be reinstalled without have to manually fiddle with the file system.

The input function now throws an error when a requested input doesn't exist.

Previously it was trying to install built-in modules like 'fs' through npm. I've modified the code so that it now ignores the built-in modules although to start it only ignores 'fs' and I'll add more to the list over time.
------
```typescript

```



