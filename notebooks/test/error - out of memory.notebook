{
    "version": 1,
    "language": "javascript",
    "cells": [
        {
            "id": "5f152eb0-6098-11e9-a036-53f4c2e49d87",
            "cellType": "markdown",
            "code": "This notebook causes a fatal out of memory error.",
            "lastEvaluationDate": "2019-04-17T08:43:11.911+10:00",
            "output": [],
            "errors": []
        },
        {
            "id": "beb99260-5fdb-11e9-b308-7bae54bc8ed8",
            "cellType": "code",
            "cellScope": "global",
            "code": "const dataForge = require('data-forge');\r\nrequire('data-forge-fs');\r\n\r\nlet inputSeries = (await dataForge.readFile(\"./CS-D.BITCOIN.CFD.IP-HOUR.csv\").parseCSV({ dynamicTyping: true }))\r\n    .reverse()\r\n    .generateSeries(row => ({ date: row.timestamp })) //fio:\r\n    .parseDates(\"timestamp\", \"YYYY/MM/DD HH:mm:ss\")\r\n    .generateSeries({\r\n        open: row => (row.openBid + row.openAsk) / 2,\r\n        high: row => (row.highBid + row.highAsk) / 2,\r\n        low: row => (row.lowBid + row.lowAsk) / 2,\r\n        close: row => (row.closeBid + row.closeAsk) / 2,\r\n    })\r\n    .dropSeries([\"openBid\", \"openAsk\", \"highBid\", \"highAsk\", \"lowBid\", \"lowAsk\", \"closeBid\", \"closeAsk\"])\r\n    .setIndex(\"timestamp\") // Index so we can later merge on date.\r\n    .renameSeries({ timestamp: \"time\" })\r\n    .bake();\r\n\r\nconsole.log(\"Everything is awesome!\");",
            "lastEvaluationDate": "2020-03-18T13:52:16.799+10:00",
            "output": [],
            "errors": [
                {
                    "msg": "FATAL ERROR: invalid array length Allocation failed - JavaScript heap out of memory\r"
                }
            ]
        }
    ]
}